//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SyncFrameWork.SyncService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SyncService.ISyncService")]
    public interface ISyncService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/LoadSyncSession", ReplyAction="http://tempuri.org/ISyncService/LoadSyncSessionResponse")]
        Common.LocalSyncDetails LoadSyncSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/SaveSyncSession", ReplyAction="http://tempuri.org/ISyncService/SaveSyncSessionResponse")]
        bool SaveSyncSession(Common.LocalSyncDetails localSync);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetCurrentSyncKnowledge", ReplyAction="http://tempuri.org/ISyncService/GetCurrentSyncKnowledgeResponse")]
        Microsoft.Synchronization.SyncKnowledge GetCurrentSyncKnowledge();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetChanges", ReplyAction="http://tempuri.org/ISyncService/GetChangesResponse")]
        byte[] GetChanges(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge, Common.LocalSyncDetails dfs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/DownloadSingleFile", ReplyAction="http://tempuri.org/ISyncService/DownloadSingleFileResponse")]
        string DownloadSingleFile(string filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/DownloadFile", ReplyAction="http://tempuri.org/ISyncService/DownloadFileResponse")]
        System.IO.Stream DownloadFile(string filepath);
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/UploadFile", ReplyAction="http://tempuri.org/ISyncService/UploadFileResponse")]
        SyncFrameWork.SyncService.UploadFileResponse UploadFile(SyncFrameWork.SyncService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/DeleteFile", ReplyAction="http://tempuri.org/ISyncService/DeleteFileResponse")]
        void DeleteFile(Microsoft.Synchronization.SyncId itemID, string itemUri);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/StoreKnowledgeForScope", ReplyAction="http://tempuri.org/ISyncService/StoreKnowledgeForScopeResponse")]
        void StoreKnowledgeForScope(Microsoft.Synchronization.SyncKnowledge knowledge, Microsoft.Synchronization.ForgottenKnowledge forgotten);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetLastWriteTimeUtcForFile", ReplyAction="http://tempuri.org/ISyncService/GetLastWriteTimeUtcForFileResponse")]
        System.DateTime GetLastWriteTimeUtcForFile(string filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetServerFileInfo", ReplyAction="http://tempuri.org/ISyncService/GetServerFileInfoResponse")]
        System.IO.FileInfo[] GetServerFileInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/CreateFileTest", ReplyAction="http://tempuri.org/ISyncService/CreateFileTestResponse")]
        void CreateFileTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/DeleteTestFile", ReplyAction="http://tempuri.org/ISyncService/DeleteTestFileResponse")]
        void DeleteTestFile(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/EditServerTextFile", ReplyAction="http://tempuri.org/ISyncService/EditServerTextFileResponse")]
        void EditServerTextFile(string file, string text);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public Common.ItemMetadata Metadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(long Length, Common.ItemMetadata Metadata, System.IO.Stream FileByteStream) {
            this.Length = Length;
            this.Metadata = Metadata;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISyncServiceChannel : SyncFrameWork.SyncService.ISyncService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncServiceClient : System.ServiceModel.ClientBase<SyncFrameWork.SyncService.ISyncService>, SyncFrameWork.SyncService.ISyncService {
        
        public SyncServiceClient() {
        }
        
        public SyncServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SyncServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Common.LocalSyncDetails LoadSyncSession() {
            return base.Channel.LoadSyncSession();
        }
        
        public bool SaveSyncSession(Common.LocalSyncDetails localSync) {
            return base.Channel.SaveSyncSession(localSync);
        }
        
        public Microsoft.Synchronization.SyncKnowledge GetCurrentSyncKnowledge() {
            return base.Channel.GetCurrentSyncKnowledge();
        }
        
        public byte[] GetChanges(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge, Common.LocalSyncDetails dfs) {
            return base.Channel.GetChanges(batchSize, destinationKnowledge, dfs);
        }
        
        public string DownloadSingleFile(string filepath) {
            return base.Channel.DownloadSingleFile(filepath);
        }
        
        public System.IO.Stream DownloadFile(string filepath) {
            return base.Channel.DownloadFile(filepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SyncFrameWork.SyncService.UploadFileResponse SyncFrameWork.SyncService.ISyncService.UploadFile(SyncFrameWork.SyncService.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(long Length, Common.ItemMetadata Metadata, System.IO.Stream FileByteStream) {
            SyncFrameWork.SyncService.RemoteFileInfo inValue = new SyncFrameWork.SyncService.RemoteFileInfo();
            inValue.Length = Length;
            inValue.Metadata = Metadata;
            inValue.FileByteStream = FileByteStream;
            SyncFrameWork.SyncService.UploadFileResponse retVal = ((SyncFrameWork.SyncService.ISyncService)(this)).UploadFile(inValue);
        }
        
        public void DeleteFile(Microsoft.Synchronization.SyncId itemID, string itemUri) {
            base.Channel.DeleteFile(itemID, itemUri);
        }
        
        public void StoreKnowledgeForScope(Microsoft.Synchronization.SyncKnowledge knowledge, Microsoft.Synchronization.ForgottenKnowledge forgotten) {
            base.Channel.StoreKnowledgeForScope(knowledge, forgotten);
        }
        
        public System.DateTime GetLastWriteTimeUtcForFile(string filepath) {
            return base.Channel.GetLastWriteTimeUtcForFile(filepath);
        }
        
        public System.IO.FileInfo[] GetServerFileInfo() {
            return base.Channel.GetServerFileInfo();
        }
        
        public void CreateFileTest() {
            base.Channel.CreateFileTest();
        }
        
        public void DeleteTestFile(string file) {
            base.Channel.DeleteTestFile(file);
        }
        
        public void EditServerTextFile(string file, string text) {
            base.Channel.EditServerTextFile(file, text);
        }
    }
}
